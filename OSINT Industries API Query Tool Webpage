
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Query Tool</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .side-widget {
            display: inline-block;
            margin-right: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .widget img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 10px;
        }
        #loadingScreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
    </style>
</head>
<body>
<div id="loadingScreen">
    <img src="assets/load.gif" alt="Loading...">
</div>

<h2>Enter Email:</h2>
<input type="text" id="inputEmail" placeholder="Enter email">
    
<h2>Enter Phone Number:</h2>
<input type="text" id="inputPhone" placeholder="Enter phone number">
    
<button onclick="fetchData()">Submit</button>

<h3>API Response:</h3>
<table border="1" id="dataTable">
    <thead>
        <tr>
            <th>Website</th>
            <th>Profile Link</th>
            <th>Data</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<script>
    function fetchData() {
        document.getElementById('loadingScreen').style.display = 'flex';

        const emailValue = document.getElementById('inputEmail').value;
        const phoneValue = document.getElementById('inputPhone').value;

        let url;
        if (emailValue) {
            url = `https://osint.industries/api/email/${emailValue}`;
        } else if (phoneValue) {
            url = `https://osint.industries/api/phone/${phoneValue}`;
        } else {
            alert("Please enter either an email or phone number.");
            return;
        }

        fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
                'api-key': 'fec7b4c608be80fe61c9c9be1d08fe74'
            }
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById('loadingScreen').style.display = 'none';
            renderData(data);
        })
    .catch(error => {
                document.getElementById('dataContainer').textContent = 'Error fetching data: ' + error;
            });
    }

function convertTableToCSV(table) {
    const rows = table.querySelectorAll('tr');
    let csv = [];
    rows.forEach(row => {
        const columns = row.querySelectorAll('td, th');
        let rowData = [];
        columns.forEach(column => rowData.push(column.innerText));
        csv.push(rowData.join(','));
    });
    return csv.join('\n');
}

function renderData(jsonData) {
    const tableBody = document.getElementById('dataTable').querySelector('tbody');

    jsonData.data.forEach(item => {
        const row = document.createElement('tr');
        let imageUrl, username, profileLink;

        switch (item.module) {
            case 'etsy':
                imageUrl = item.data.avatar;
                username = item.data.name;
                profileLink = 'N/A'; // No profile link provided for Etsy in the sample data
                break;
            case 'emailcheckers':
                // For simplicity, we'll just take the first item in the data array
                username = item.data.email;
                profileLink = 'N/A'; // No profile link provided for emailcheckers in the sample data
                break;
            case 'hibp':
                // For simplicity, we'll just take the first item in the data array
                username = item.data[0].Name;
                imageUrl = item.data[0].LogoPath;
                profileLink = 'N/A'; // No profile link provided for hibp in the sample data
                break;
            case 'google':
                // Hypothetical structure for YouTube and Google Maps
                if (item.data.service === 'youtube') {
                    username = item.data.channelName;
                    imageUrl = item.data.channelAvatar;
                    profileLink = item.data.channelUrl;
                } else if (item.data.service === 'googlemaps') {
                    username = item.data.locationName;
                    imageUrl = 'N/A'; // Assuming no image for Google Maps
                    profileLink = item.data.locationUrl;
                }
                break;
            default:
                username = item.data.username || 'N/A';
                imageUrl = item.data.avatar_url || item.data.avatar || item.data.picture || 'Image not available';
                profileLink = item.data.member_url || 'N/A';
        }

        // Populate table rows
        const websiteNameCell = document.createElement('td');
        websiteNameCell.textContent = item.module;
        row.appendChild(websiteNameCell);

        const profileLinkCell = document.createElement('td');
        profileLinkCell.textContent = profileLink;
        row.appendChild(profileLinkCell);

        const dataCell = document.createElement('td');
        dataCell.textContent = "Username: " + username;
        row.appendChild(dataCell);

        tableBody.appendChild(row);

        // Create the widget for profile picture
        const widgetDiv = document.createElement('div');
        widgetDiv.className = 'side-widget to-right invert-color mix-blend-difference show';

        // Website name
        const websiteName = document.createElement('h4');
        websiteName.textContent = item.module;
        widgetDiv.appendChild(websiteName);

        // Image
        const img = document.createElement('img');
        img.src = imageUrl;
        widgetDiv.appendChild(img);

        // Username
        const usernameElement = document.createElement('p');
        usernameElement.textContent = "Username: " + username;
        widgetDiv.appendChild(usernameElement);

        document.body.appendChild(widgetDiv);
    });
 	const csvButton = document.createElement('button');
    csvButton.textContent = "Download Table as CSV";
    csvButton.onclick = function() {
        const csvData = convertTableToCSV(document.getElementById('dataTable'));
        const blob = new Blob([csvData], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.setAttribute('hidden', '');
        a.setAttribute('href', url);
        a.setAttribute('download', 'table_data.csv');
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    };
    document.body.appendChild(csvButton);
}

</script>
</body>
</html>
